// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: PBNetStat.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "PBNetStat.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* NL_IpTableStat_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NL_IpTableStat_reflection_ = NULL;
const ::google::protobuf::Descriptor* NL_EthernetStat_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NL_EthernetStat_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* NL_EthernetStat_Status_descriptor_ = NULL;
const ::google::protobuf::Descriptor* NL_SwitchStat_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NL_SwitchStat_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* NL_SwitchStat_Status_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* NL_SwitchStat_Duplex_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* NL_SwitchStat_Speed_descriptor_ = NULL;
const ::google::protobuf::Descriptor* NL_Message_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NL_Message_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* NL_Message_Source_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* NL_Message_Command_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* NL_Message_Network_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_PBNetStat_2eproto() {
  protobuf_AddDesc_PBNetStat_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "PBNetStat.proto");
  GOOGLE_CHECK(file != NULL);
  NL_IpTableStat_descriptor_ = file->message_type(0);
  static const int NL_IpTableStat_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NL_IpTableStat, ident_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NL_IpTableStat, chain_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NL_IpTableStat, desc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NL_IpTableStat, bytecount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NL_IpTableStat, packetcount_),
  };
  NL_IpTableStat_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NL_IpTableStat_descriptor_,
      NL_IpTableStat::default_instance_,
      NL_IpTableStat_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NL_IpTableStat, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NL_IpTableStat, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NL_IpTableStat));
  NL_EthernetStat_descriptor_ = file->message_type(1);
  static const int NL_EthernetStat_offsets_[15] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NL_EthernetStat, ident_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NL_EthernetStat, interface_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NL_EthernetStat, interfacename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NL_EthernetStat, rxgood_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NL_EthernetStat, rxerrors_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NL_EthernetStat, rxdropped_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NL_EthernetStat, rxoverruns_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NL_EthernetStat, rxframe_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NL_EthernetStat, txgood_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NL_EthernetStat, txerrors_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NL_EthernetStat, txdropped_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NL_EthernetStat, txoverruns_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NL_EthernetStat, txcarrier_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NL_EthernetStat, txcollisions_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NL_EthernetStat, status_),
  };
  NL_EthernetStat_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NL_EthernetStat_descriptor_,
      NL_EthernetStat::default_instance_,
      NL_EthernetStat_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NL_EthernetStat, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NL_EthernetStat, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NL_EthernetStat));
  NL_EthernetStat_Status_descriptor_ = NL_EthernetStat_descriptor_->enum_type(0);
  NL_SwitchStat_descriptor_ = file->message_type(2);
  static const int NL_SwitchStat_offsets_[23] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NL_SwitchStat, ident_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NL_SwitchStat, stat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NL_SwitchStat, dplx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NL_SwitchStat, spd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NL_SwitchStat, ingressbytes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NL_SwitchStat, ingressunicast_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NL_SwitchStat, ingressbroadcast_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NL_SwitchStat, ingressmulticast_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NL_SwitchStat, ingresspause_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NL_SwitchStat, ingressundersize_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NL_SwitchStat, ingressfragments_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NL_SwitchStat, ingressoversize_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NL_SwitchStat, ingressjabber_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NL_SwitchStat, ingressrxerr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NL_SwitchStat, ingressfcserr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NL_SwitchStat, egressbytes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NL_SwitchStat, egressunicast_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NL_SwitchStat, egressbroadcast_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NL_SwitchStat, egressmulticast_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NL_SwitchStat, egresspause_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NL_SwitchStat, egressexcessive_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NL_SwitchStat, egresscollisions_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NL_SwitchStat, egressother_),
  };
  NL_SwitchStat_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NL_SwitchStat_descriptor_,
      NL_SwitchStat::default_instance_,
      NL_SwitchStat_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NL_SwitchStat, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NL_SwitchStat, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NL_SwitchStat));
  NL_SwitchStat_Status_descriptor_ = NL_SwitchStat_descriptor_->enum_type(0);
  NL_SwitchStat_Duplex_descriptor_ = NL_SwitchStat_descriptor_->enum_type(1);
  NL_SwitchStat_Speed_descriptor_ = NL_SwitchStat_descriptor_->enum_type(2);
  NL_Message_descriptor_ = file->message_type(3);
  static const int NL_Message_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NL_Message, source_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NL_Message, command_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NL_Message, ipstat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NL_Message, switchstat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NL_Message, ethernetstat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NL_Message, switchstatnetwork_),
  };
  NL_Message_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NL_Message_descriptor_,
      NL_Message::default_instance_,
      NL_Message_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NL_Message, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NL_Message, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NL_Message));
  NL_Message_Source_descriptor_ = NL_Message_descriptor_->enum_type(0);
  NL_Message_Command_descriptor_ = NL_Message_descriptor_->enum_type(1);
  NL_Message_Network_descriptor_ = NL_Message_descriptor_->enum_type(2);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_PBNetStat_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NL_IpTableStat_descriptor_, &NL_IpTableStat::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NL_EthernetStat_descriptor_, &NL_EthernetStat::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NL_SwitchStat_descriptor_, &NL_SwitchStat::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NL_Message_descriptor_, &NL_Message::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_PBNetStat_2eproto() {
  delete NL_IpTableStat::default_instance_;
  delete NL_IpTableStat_reflection_;
  delete NL_EthernetStat::default_instance_;
  delete NL_EthernetStat_reflection_;
  delete NL_SwitchStat::default_instance_;
  delete NL_SwitchStat_reflection_;
  delete NL_Message::default_instance_;
  delete NL_Message_reflection_;
}

void protobuf_AddDesc_PBNetStat_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\017PBNetStat.proto\"d\n\016NL_IpTableStat\022\r\n\005i"
    "dent\030\001 \002(\r\022\r\n\005chain\030\002 \002(\t\022\014\n\004desc\030\003 \001(\t\022"
    "\021\n\tbyteCount\030\004 \001(\004\022\023\n\013packetCount\030\005 \001(\004\""
    "\333\002\n\017NL_EthernetStat\022\r\n\005ident\030\001 \002(\r\022\021\n\tin"
    "terface\030\002 \001(\t\022\025\n\rinterfaceName\030\003 \001(\t\022\016\n\006"
    "rxGood\030\004 \001(\004\022\020\n\010rxErrors\030\005 \001(\004\022\021\n\trxDrop"
    "ped\030\006 \001(\004\022\022\n\nrxOverruns\030\007 \001(\004\022\017\n\007rxFrame"
    "\030\010 \001(\004\022\016\n\006txGood\030\t \001(\004\022\020\n\010txErrors\030\n \001(\004"
    "\022\021\n\ttxDropped\030\013 \001(\004\022\022\n\ntxOverruns\030\014 \001(\004\022"
    "\021\n\ttxCarrier\030\r \001(\004\022\024\n\014txCollisions\030\016 \001(\004"
    "\022\'\n\006status\030\017 \001(\0162\027.NL_EthernetStat.Statu"
    "s\"\032\n\006Status\022\010\n\004DOWN\020\000\022\006\n\002UP\020\001\"\263\005\n\rNL_Swi"
    "tchStat\022\r\n\005ident\030\001 \002(\r\022#\n\004stat\030\002 \001(\0162\025.N"
    "L_SwitchStat.Status\022#\n\004dplx\030\003 \001(\0162\025.NL_S"
    "witchStat.Duplex\022!\n\003spd\030\004 \001(\0162\024.NL_Switc"
    "hStat.Speed\022\024\n\014ingressbytes\030\005 \001(\004\022\026\n\016ing"
    "ressunicast\030\006 \001(\004\022\030\n\020ingressbroadcast\030\007 "
    "\001(\004\022\030\n\020ingressmulticast\030\010 \001(\004\022\024\n\014ingress"
    "pause\030\t \001(\004\022\030\n\020ingressundersize\030\n \001(\004\022\030\n"
    "\020ingressfragments\030\013 \001(\004\022\027\n\017ingressoversi"
    "ze\030\014 \001(\004\022\025\n\ringressjabber\030\r \001(\004\022\024\n\014ingre"
    "ssrxerr\030\016 \001(\004\022\025\n\ringressfcserr\030\017 \001(\004\022\023\n\013"
    "egressbytes\030\020 \001(\004\022\025\n\regressunicast\030\021 \001(\004"
    "\022\027\n\017egressbroadcast\030\022 \001(\004\022\027\n\017egressmulti"
    "cast\030\023 \001(\004\022\023\n\013egresspause\030\024 \001(\004\022\027\n\017egres"
    "sexcessive\030\025 \001(\004\022\030\n\020egresscollisions\030\026 \001"
    "(\004\022\023\n\013egressother\030\027 \001(\004\"\032\n\006Status\022\010\n\004DOW"
    "N\020\000\022\006\n\002UP\020\001\"\034\n\006Duplex\022\010\n\004FULL\020\000\022\010\n\004HALF\020"
    "\001\"(\n\005Speed\022\010\n\004MB10\020\000\022\t\n\005MB100\020\001\022\n\n\006MB100"
    "0\020\002\"\301\003\n\nNL_Message\022+\n\006source\030\001 \002(\0162\022.NL_"
    "Message.Source:\007INVALID\022.\n\007command\030\002 \002(\016"
    "2\023.NL_Message.Command:\010REGISTER\022\037\n\006ipSta"
    "t\030\003 \003(\0132\017.NL_IpTableStat\022\"\n\nswitchStat\030\004"
    " \003(\0132\016.NL_SwitchStat\022&\n\014ethernetStat\030\005 \003"
    "(\0132\020.NL_EthernetStat\022.\n\021switchStatNetwor"
    "k\030\006 \001(\0162\023.NL_Message.Network\"B\n\006Source\022\006"
    "\n\002IO\020\000\022\007\n\003ADS\020\001\022\007\n\003EFB\020\002\022\010\n\004COMM\020\003\022\024\n\007IN"
    "VALID\020\377\377\377\377\377\377\377\377\377\001\"X\n\007Command\022\014\n\010REGISTER\020"
    "\000\022\024\n\020REGISTER_REQUEST\020\001\022\n\n\006UPDATE\020\002\022\022\n\016U"
    "PDATE_REQUEST\020\003\022\t\n\005CLEAR\020\004\"\033\n\007Network\022\007\n"
    "\003EDN\020\000\022\007\n\003IDN\020\001", 1615);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "PBNetStat.proto", &protobuf_RegisterTypes);
  NL_IpTableStat::default_instance_ = new NL_IpTableStat();
  NL_EthernetStat::default_instance_ = new NL_EthernetStat();
  NL_SwitchStat::default_instance_ = new NL_SwitchStat();
  NL_Message::default_instance_ = new NL_Message();
  NL_IpTableStat::default_instance_->InitAsDefaultInstance();
  NL_EthernetStat::default_instance_->InitAsDefaultInstance();
  NL_SwitchStat::default_instance_->InitAsDefaultInstance();
  NL_Message::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_PBNetStat_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_PBNetStat_2eproto {
  StaticDescriptorInitializer_PBNetStat_2eproto() {
    protobuf_AddDesc_PBNetStat_2eproto();
  }
} static_descriptor_initializer_PBNetStat_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int NL_IpTableStat::kIdentFieldNumber;
const int NL_IpTableStat::kChainFieldNumber;
const int NL_IpTableStat::kDescFieldNumber;
const int NL_IpTableStat::kByteCountFieldNumber;
const int NL_IpTableStat::kPacketCountFieldNumber;
#endif  // !_MSC_VER

NL_IpTableStat::NL_IpTableStat()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:NL_IpTableStat)
}

void NL_IpTableStat::InitAsDefaultInstance() {
}

NL_IpTableStat::NL_IpTableStat(const NL_IpTableStat& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:NL_IpTableStat)
}

void NL_IpTableStat::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  ident_ = 0u;
  chain_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  desc_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  bytecount_ = GOOGLE_ULONGLONG(0);
  packetcount_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NL_IpTableStat::~NL_IpTableStat() {
  // @@protoc_insertion_point(destructor:NL_IpTableStat)
  SharedDtor();
}

void NL_IpTableStat::SharedDtor() {
  if (chain_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete chain_;
  }
  if (desc_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete desc_;
  }
  if (this != default_instance_) {
  }
}

void NL_IpTableStat::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NL_IpTableStat::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NL_IpTableStat_descriptor_;
}

const NL_IpTableStat& NL_IpTableStat::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PBNetStat_2eproto();
  return *default_instance_;
}

NL_IpTableStat* NL_IpTableStat::default_instance_ = NULL;

NL_IpTableStat* NL_IpTableStat::New() const {
  return new NL_IpTableStat;
}

void NL_IpTableStat::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<NL_IpTableStat*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(bytecount_, ident_);
    if (has_chain()) {
      if (chain_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        chain_->clear();
      }
    }
    if (has_desc()) {
      if (desc_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        desc_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NL_IpTableStat::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NL_IpTableStat)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 ident = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ident_)));
          set_has_ident();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_chain;
        break;
      }

      // required string chain = 2;
      case 2: {
        if (tag == 18) {
         parse_chain:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_chain()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->chain().data(), this->chain().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "chain");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_desc;
        break;
      }

      // optional string desc = 3;
      case 3: {
        if (tag == 26) {
         parse_desc:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_desc()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->desc().data(), this->desc().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "desc");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_byteCount;
        break;
      }

      // optional uint64 byteCount = 4;
      case 4: {
        if (tag == 32) {
         parse_byteCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &bytecount_)));
          set_has_bytecount();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_packetCount;
        break;
      }

      // optional uint64 packetCount = 5;
      case 5: {
        if (tag == 40) {
         parse_packetCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &packetcount_)));
          set_has_packetcount();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NL_IpTableStat)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NL_IpTableStat)
  return false;
#undef DO_
}

void NL_IpTableStat::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NL_IpTableStat)
  // required uint32 ident = 1;
  if (has_ident()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->ident(), output);
  }

  // required string chain = 2;
  if (has_chain()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->chain().data(), this->chain().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "chain");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->chain(), output);
  }

  // optional string desc = 3;
  if (has_desc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->desc().data(), this->desc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "desc");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->desc(), output);
  }

  // optional uint64 byteCount = 4;
  if (has_bytecount()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->bytecount(), output);
  }

  // optional uint64 packetCount = 5;
  if (has_packetcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->packetcount(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:NL_IpTableStat)
}

::google::protobuf::uint8* NL_IpTableStat::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:NL_IpTableStat)
  // required uint32 ident = 1;
  if (has_ident()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->ident(), target);
  }

  // required string chain = 2;
  if (has_chain()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->chain().data(), this->chain().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "chain");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->chain(), target);
  }

  // optional string desc = 3;
  if (has_desc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->desc().data(), this->desc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "desc");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->desc(), target);
  }

  // optional uint64 byteCount = 4;
  if (has_bytecount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->bytecount(), target);
  }

  // optional uint64 packetCount = 5;
  if (has_packetcount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->packetcount(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NL_IpTableStat)
  return target;
}

int NL_IpTableStat::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 ident = 1;
    if (has_ident()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ident());
    }

    // required string chain = 2;
    if (has_chain()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->chain());
    }

    // optional string desc = 3;
    if (has_desc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->desc());
    }

    // optional uint64 byteCount = 4;
    if (has_bytecount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->bytecount());
    }

    // optional uint64 packetCount = 5;
    if (has_packetcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->packetcount());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NL_IpTableStat::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NL_IpTableStat* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NL_IpTableStat*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NL_IpTableStat::MergeFrom(const NL_IpTableStat& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ident()) {
      set_ident(from.ident());
    }
    if (from.has_chain()) {
      set_chain(from.chain());
    }
    if (from.has_desc()) {
      set_desc(from.desc());
    }
    if (from.has_bytecount()) {
      set_bytecount(from.bytecount());
    }
    if (from.has_packetcount()) {
      set_packetcount(from.packetcount());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NL_IpTableStat::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NL_IpTableStat::CopyFrom(const NL_IpTableStat& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NL_IpTableStat::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void NL_IpTableStat::Swap(NL_IpTableStat* other) {
  if (other != this) {
    std::swap(ident_, other->ident_);
    std::swap(chain_, other->chain_);
    std::swap(desc_, other->desc_);
    std::swap(bytecount_, other->bytecount_);
    std::swap(packetcount_, other->packetcount_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NL_IpTableStat::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NL_IpTableStat_descriptor_;
  metadata.reflection = NL_IpTableStat_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* NL_EthernetStat_Status_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NL_EthernetStat_Status_descriptor_;
}
bool NL_EthernetStat_Status_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const NL_EthernetStat_Status NL_EthernetStat::DOWN;
const NL_EthernetStat_Status NL_EthernetStat::UP;
const NL_EthernetStat_Status NL_EthernetStat::Status_MIN;
const NL_EthernetStat_Status NL_EthernetStat::Status_MAX;
const int NL_EthernetStat::Status_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int NL_EthernetStat::kIdentFieldNumber;
const int NL_EthernetStat::kInterfaceFieldNumber;
const int NL_EthernetStat::kInterfaceNameFieldNumber;
const int NL_EthernetStat::kRxGoodFieldNumber;
const int NL_EthernetStat::kRxErrorsFieldNumber;
const int NL_EthernetStat::kRxDroppedFieldNumber;
const int NL_EthernetStat::kRxOverrunsFieldNumber;
const int NL_EthernetStat::kRxFrameFieldNumber;
const int NL_EthernetStat::kTxGoodFieldNumber;
const int NL_EthernetStat::kTxErrorsFieldNumber;
const int NL_EthernetStat::kTxDroppedFieldNumber;
const int NL_EthernetStat::kTxOverrunsFieldNumber;
const int NL_EthernetStat::kTxCarrierFieldNumber;
const int NL_EthernetStat::kTxCollisionsFieldNumber;
const int NL_EthernetStat::kStatusFieldNumber;
#endif  // !_MSC_VER

NL_EthernetStat::NL_EthernetStat()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:NL_EthernetStat)
}

void NL_EthernetStat::InitAsDefaultInstance() {
}

NL_EthernetStat::NL_EthernetStat(const NL_EthernetStat& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:NL_EthernetStat)
}

void NL_EthernetStat::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  ident_ = 0u;
  interface_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  interfacename_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  rxgood_ = GOOGLE_ULONGLONG(0);
  rxerrors_ = GOOGLE_ULONGLONG(0);
  rxdropped_ = GOOGLE_ULONGLONG(0);
  rxoverruns_ = GOOGLE_ULONGLONG(0);
  rxframe_ = GOOGLE_ULONGLONG(0);
  txgood_ = GOOGLE_ULONGLONG(0);
  txerrors_ = GOOGLE_ULONGLONG(0);
  txdropped_ = GOOGLE_ULONGLONG(0);
  txoverruns_ = GOOGLE_ULONGLONG(0);
  txcarrier_ = GOOGLE_ULONGLONG(0);
  txcollisions_ = GOOGLE_ULONGLONG(0);
  status_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NL_EthernetStat::~NL_EthernetStat() {
  // @@protoc_insertion_point(destructor:NL_EthernetStat)
  SharedDtor();
}

void NL_EthernetStat::SharedDtor() {
  if (interface_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete interface_;
  }
  if (interfacename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete interfacename_;
  }
  if (this != default_instance_) {
  }
}

void NL_EthernetStat::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NL_EthernetStat::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NL_EthernetStat_descriptor_;
}

const NL_EthernetStat& NL_EthernetStat::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PBNetStat_2eproto();
  return *default_instance_;
}

NL_EthernetStat* NL_EthernetStat::default_instance_ = NULL;

NL_EthernetStat* NL_EthernetStat::New() const {
  return new NL_EthernetStat;
}

void NL_EthernetStat::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<NL_EthernetStat*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(rxgood_, ident_);
    if (has_interface()) {
      if (interface_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        interface_->clear();
      }
    }
    if (has_interfacename()) {
      if (interfacename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        interfacename_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & 32512) {
    ZR_(status_, txcollisions_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NL_EthernetStat::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NL_EthernetStat)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 ident = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ident_)));
          set_has_ident();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_interface;
        break;
      }

      // optional string interface = 2;
      case 2: {
        if (tag == 18) {
         parse_interface:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_interface()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->interface().data(), this->interface().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "interface");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_interfaceName;
        break;
      }

      // optional string interfaceName = 3;
      case 3: {
        if (tag == 26) {
         parse_interfaceName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_interfacename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->interfacename().data(), this->interfacename().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "interfacename");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_rxGood;
        break;
      }

      // optional uint64 rxGood = 4;
      case 4: {
        if (tag == 32) {
         parse_rxGood:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &rxgood_)));
          set_has_rxgood();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_rxErrors;
        break;
      }

      // optional uint64 rxErrors = 5;
      case 5: {
        if (tag == 40) {
         parse_rxErrors:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &rxerrors_)));
          set_has_rxerrors();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_rxDropped;
        break;
      }

      // optional uint64 rxDropped = 6;
      case 6: {
        if (tag == 48) {
         parse_rxDropped:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &rxdropped_)));
          set_has_rxdropped();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_rxOverruns;
        break;
      }

      // optional uint64 rxOverruns = 7;
      case 7: {
        if (tag == 56) {
         parse_rxOverruns:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &rxoverruns_)));
          set_has_rxoverruns();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_rxFrame;
        break;
      }

      // optional uint64 rxFrame = 8;
      case 8: {
        if (tag == 64) {
         parse_rxFrame:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &rxframe_)));
          set_has_rxframe();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_txGood;
        break;
      }

      // optional uint64 txGood = 9;
      case 9: {
        if (tag == 72) {
         parse_txGood:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &txgood_)));
          set_has_txgood();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_txErrors;
        break;
      }

      // optional uint64 txErrors = 10;
      case 10: {
        if (tag == 80) {
         parse_txErrors:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &txerrors_)));
          set_has_txerrors();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_txDropped;
        break;
      }

      // optional uint64 txDropped = 11;
      case 11: {
        if (tag == 88) {
         parse_txDropped:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &txdropped_)));
          set_has_txdropped();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_txOverruns;
        break;
      }

      // optional uint64 txOverruns = 12;
      case 12: {
        if (tag == 96) {
         parse_txOverruns:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &txoverruns_)));
          set_has_txoverruns();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_txCarrier;
        break;
      }

      // optional uint64 txCarrier = 13;
      case 13: {
        if (tag == 104) {
         parse_txCarrier:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &txcarrier_)));
          set_has_txcarrier();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_txCollisions;
        break;
      }

      // optional uint64 txCollisions = 14;
      case 14: {
        if (tag == 112) {
         parse_txCollisions:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &txcollisions_)));
          set_has_txcollisions();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(120)) goto parse_status;
        break;
      }

      // optional .NL_EthernetStat.Status status = 15;
      case 15: {
        if (tag == 120) {
         parse_status:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::NL_EthernetStat_Status_IsValid(value)) {
            set_status(static_cast< ::NL_EthernetStat_Status >(value));
          } else {
            mutable_unknown_fields()->AddVarint(15, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NL_EthernetStat)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NL_EthernetStat)
  return false;
#undef DO_
}

void NL_EthernetStat::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NL_EthernetStat)
  // required uint32 ident = 1;
  if (has_ident()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->ident(), output);
  }

  // optional string interface = 2;
  if (has_interface()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->interface().data(), this->interface().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "interface");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->interface(), output);
  }

  // optional string interfaceName = 3;
  if (has_interfacename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->interfacename().data(), this->interfacename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "interfacename");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->interfacename(), output);
  }

  // optional uint64 rxGood = 4;
  if (has_rxgood()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->rxgood(), output);
  }

  // optional uint64 rxErrors = 5;
  if (has_rxerrors()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->rxerrors(), output);
  }

  // optional uint64 rxDropped = 6;
  if (has_rxdropped()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->rxdropped(), output);
  }

  // optional uint64 rxOverruns = 7;
  if (has_rxoverruns()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->rxoverruns(), output);
  }

  // optional uint64 rxFrame = 8;
  if (has_rxframe()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(8, this->rxframe(), output);
  }

  // optional uint64 txGood = 9;
  if (has_txgood()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(9, this->txgood(), output);
  }

  // optional uint64 txErrors = 10;
  if (has_txerrors()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(10, this->txerrors(), output);
  }

  // optional uint64 txDropped = 11;
  if (has_txdropped()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(11, this->txdropped(), output);
  }

  // optional uint64 txOverruns = 12;
  if (has_txoverruns()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(12, this->txoverruns(), output);
  }

  // optional uint64 txCarrier = 13;
  if (has_txcarrier()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(13, this->txcarrier(), output);
  }

  // optional uint64 txCollisions = 14;
  if (has_txcollisions()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(14, this->txcollisions(), output);
  }

  // optional .NL_EthernetStat.Status status = 15;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      15, this->status(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:NL_EthernetStat)
}

::google::protobuf::uint8* NL_EthernetStat::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:NL_EthernetStat)
  // required uint32 ident = 1;
  if (has_ident()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->ident(), target);
  }

  // optional string interface = 2;
  if (has_interface()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->interface().data(), this->interface().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "interface");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->interface(), target);
  }

  // optional string interfaceName = 3;
  if (has_interfacename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->interfacename().data(), this->interfacename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "interfacename");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->interfacename(), target);
  }

  // optional uint64 rxGood = 4;
  if (has_rxgood()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->rxgood(), target);
  }

  // optional uint64 rxErrors = 5;
  if (has_rxerrors()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->rxerrors(), target);
  }

  // optional uint64 rxDropped = 6;
  if (has_rxdropped()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->rxdropped(), target);
  }

  // optional uint64 rxOverruns = 7;
  if (has_rxoverruns()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(7, this->rxoverruns(), target);
  }

  // optional uint64 rxFrame = 8;
  if (has_rxframe()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(8, this->rxframe(), target);
  }

  // optional uint64 txGood = 9;
  if (has_txgood()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(9, this->txgood(), target);
  }

  // optional uint64 txErrors = 10;
  if (has_txerrors()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(10, this->txerrors(), target);
  }

  // optional uint64 txDropped = 11;
  if (has_txdropped()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(11, this->txdropped(), target);
  }

  // optional uint64 txOverruns = 12;
  if (has_txoverruns()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(12, this->txoverruns(), target);
  }

  // optional uint64 txCarrier = 13;
  if (has_txcarrier()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(13, this->txcarrier(), target);
  }

  // optional uint64 txCollisions = 14;
  if (has_txcollisions()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(14, this->txcollisions(), target);
  }

  // optional .NL_EthernetStat.Status status = 15;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      15, this->status(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NL_EthernetStat)
  return target;
}

int NL_EthernetStat::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 ident = 1;
    if (has_ident()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ident());
    }

    // optional string interface = 2;
    if (has_interface()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->interface());
    }

    // optional string interfaceName = 3;
    if (has_interfacename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->interfacename());
    }

    // optional uint64 rxGood = 4;
    if (has_rxgood()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->rxgood());
    }

    // optional uint64 rxErrors = 5;
    if (has_rxerrors()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->rxerrors());
    }

    // optional uint64 rxDropped = 6;
    if (has_rxdropped()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->rxdropped());
    }

    // optional uint64 rxOverruns = 7;
    if (has_rxoverruns()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->rxoverruns());
    }

    // optional uint64 rxFrame = 8;
    if (has_rxframe()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->rxframe());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint64 txGood = 9;
    if (has_txgood()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->txgood());
    }

    // optional uint64 txErrors = 10;
    if (has_txerrors()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->txerrors());
    }

    // optional uint64 txDropped = 11;
    if (has_txdropped()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->txdropped());
    }

    // optional uint64 txOverruns = 12;
    if (has_txoverruns()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->txoverruns());
    }

    // optional uint64 txCarrier = 13;
    if (has_txcarrier()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->txcarrier());
    }

    // optional uint64 txCollisions = 14;
    if (has_txcollisions()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->txcollisions());
    }

    // optional .NL_EthernetStat.Status status = 15;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NL_EthernetStat::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NL_EthernetStat* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NL_EthernetStat*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NL_EthernetStat::MergeFrom(const NL_EthernetStat& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ident()) {
      set_ident(from.ident());
    }
    if (from.has_interface()) {
      set_interface(from.interface());
    }
    if (from.has_interfacename()) {
      set_interfacename(from.interfacename());
    }
    if (from.has_rxgood()) {
      set_rxgood(from.rxgood());
    }
    if (from.has_rxerrors()) {
      set_rxerrors(from.rxerrors());
    }
    if (from.has_rxdropped()) {
      set_rxdropped(from.rxdropped());
    }
    if (from.has_rxoverruns()) {
      set_rxoverruns(from.rxoverruns());
    }
    if (from.has_rxframe()) {
      set_rxframe(from.rxframe());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_txgood()) {
      set_txgood(from.txgood());
    }
    if (from.has_txerrors()) {
      set_txerrors(from.txerrors());
    }
    if (from.has_txdropped()) {
      set_txdropped(from.txdropped());
    }
    if (from.has_txoverruns()) {
      set_txoverruns(from.txoverruns());
    }
    if (from.has_txcarrier()) {
      set_txcarrier(from.txcarrier());
    }
    if (from.has_txcollisions()) {
      set_txcollisions(from.txcollisions());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NL_EthernetStat::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NL_EthernetStat::CopyFrom(const NL_EthernetStat& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NL_EthernetStat::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void NL_EthernetStat::Swap(NL_EthernetStat* other) {
  if (other != this) {
    std::swap(ident_, other->ident_);
    std::swap(interface_, other->interface_);
    std::swap(interfacename_, other->interfacename_);
    std::swap(rxgood_, other->rxgood_);
    std::swap(rxerrors_, other->rxerrors_);
    std::swap(rxdropped_, other->rxdropped_);
    std::swap(rxoverruns_, other->rxoverruns_);
    std::swap(rxframe_, other->rxframe_);
    std::swap(txgood_, other->txgood_);
    std::swap(txerrors_, other->txerrors_);
    std::swap(txdropped_, other->txdropped_);
    std::swap(txoverruns_, other->txoverruns_);
    std::swap(txcarrier_, other->txcarrier_);
    std::swap(txcollisions_, other->txcollisions_);
    std::swap(status_, other->status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NL_EthernetStat::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NL_EthernetStat_descriptor_;
  metadata.reflection = NL_EthernetStat_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* NL_SwitchStat_Status_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NL_SwitchStat_Status_descriptor_;
}
bool NL_SwitchStat_Status_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const NL_SwitchStat_Status NL_SwitchStat::DOWN;
const NL_SwitchStat_Status NL_SwitchStat::UP;
const NL_SwitchStat_Status NL_SwitchStat::Status_MIN;
const NL_SwitchStat_Status NL_SwitchStat::Status_MAX;
const int NL_SwitchStat::Status_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* NL_SwitchStat_Duplex_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NL_SwitchStat_Duplex_descriptor_;
}
bool NL_SwitchStat_Duplex_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const NL_SwitchStat_Duplex NL_SwitchStat::FULL;
const NL_SwitchStat_Duplex NL_SwitchStat::HALF;
const NL_SwitchStat_Duplex NL_SwitchStat::Duplex_MIN;
const NL_SwitchStat_Duplex NL_SwitchStat::Duplex_MAX;
const int NL_SwitchStat::Duplex_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* NL_SwitchStat_Speed_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NL_SwitchStat_Speed_descriptor_;
}
bool NL_SwitchStat_Speed_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const NL_SwitchStat_Speed NL_SwitchStat::MB10;
const NL_SwitchStat_Speed NL_SwitchStat::MB100;
const NL_SwitchStat_Speed NL_SwitchStat::MB1000;
const NL_SwitchStat_Speed NL_SwitchStat::Speed_MIN;
const NL_SwitchStat_Speed NL_SwitchStat::Speed_MAX;
const int NL_SwitchStat::Speed_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int NL_SwitchStat::kIdentFieldNumber;
const int NL_SwitchStat::kStatFieldNumber;
const int NL_SwitchStat::kDplxFieldNumber;
const int NL_SwitchStat::kSpdFieldNumber;
const int NL_SwitchStat::kIngressbytesFieldNumber;
const int NL_SwitchStat::kIngressunicastFieldNumber;
const int NL_SwitchStat::kIngressbroadcastFieldNumber;
const int NL_SwitchStat::kIngressmulticastFieldNumber;
const int NL_SwitchStat::kIngresspauseFieldNumber;
const int NL_SwitchStat::kIngressundersizeFieldNumber;
const int NL_SwitchStat::kIngressfragmentsFieldNumber;
const int NL_SwitchStat::kIngressoversizeFieldNumber;
const int NL_SwitchStat::kIngressjabberFieldNumber;
const int NL_SwitchStat::kIngressrxerrFieldNumber;
const int NL_SwitchStat::kIngressfcserrFieldNumber;
const int NL_SwitchStat::kEgressbytesFieldNumber;
const int NL_SwitchStat::kEgressunicastFieldNumber;
const int NL_SwitchStat::kEgressbroadcastFieldNumber;
const int NL_SwitchStat::kEgressmulticastFieldNumber;
const int NL_SwitchStat::kEgresspauseFieldNumber;
const int NL_SwitchStat::kEgressexcessiveFieldNumber;
const int NL_SwitchStat::kEgresscollisionsFieldNumber;
const int NL_SwitchStat::kEgressotherFieldNumber;
#endif  // !_MSC_VER

NL_SwitchStat::NL_SwitchStat()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:NL_SwitchStat)
}

void NL_SwitchStat::InitAsDefaultInstance() {
}

NL_SwitchStat::NL_SwitchStat(const NL_SwitchStat& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:NL_SwitchStat)
}

void NL_SwitchStat::SharedCtor() {
  _cached_size_ = 0;
  ident_ = 0u;
  stat_ = 0;
  dplx_ = 0;
  spd_ = 0;
  ingressbytes_ = GOOGLE_ULONGLONG(0);
  ingressunicast_ = GOOGLE_ULONGLONG(0);
  ingressbroadcast_ = GOOGLE_ULONGLONG(0);
  ingressmulticast_ = GOOGLE_ULONGLONG(0);
  ingresspause_ = GOOGLE_ULONGLONG(0);
  ingressundersize_ = GOOGLE_ULONGLONG(0);
  ingressfragments_ = GOOGLE_ULONGLONG(0);
  ingressoversize_ = GOOGLE_ULONGLONG(0);
  ingressjabber_ = GOOGLE_ULONGLONG(0);
  ingressrxerr_ = GOOGLE_ULONGLONG(0);
  ingressfcserr_ = GOOGLE_ULONGLONG(0);
  egressbytes_ = GOOGLE_ULONGLONG(0);
  egressunicast_ = GOOGLE_ULONGLONG(0);
  egressbroadcast_ = GOOGLE_ULONGLONG(0);
  egressmulticast_ = GOOGLE_ULONGLONG(0);
  egresspause_ = GOOGLE_ULONGLONG(0);
  egressexcessive_ = GOOGLE_ULONGLONG(0);
  egresscollisions_ = GOOGLE_ULONGLONG(0);
  egressother_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NL_SwitchStat::~NL_SwitchStat() {
  // @@protoc_insertion_point(destructor:NL_SwitchStat)
  SharedDtor();
}

void NL_SwitchStat::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NL_SwitchStat::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NL_SwitchStat::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NL_SwitchStat_descriptor_;
}

const NL_SwitchStat& NL_SwitchStat::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PBNetStat_2eproto();
  return *default_instance_;
}

NL_SwitchStat* NL_SwitchStat::default_instance_ = NULL;

NL_SwitchStat* NL_SwitchStat::New() const {
  return new NL_SwitchStat;
}

void NL_SwitchStat::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<NL_SwitchStat*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(ident_, ingressmulticast_);
  }
  if (_has_bits_[8 / 32] & 65280) {
    ZR_(ingresspause_, egressbytes_);
  }
  if (_has_bits_[16 / 32] & 8323072) {
    ZR_(egressunicast_, egressother_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NL_SwitchStat::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NL_SwitchStat)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 ident = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ident_)));
          set_has_ident();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_stat;
        break;
      }

      // optional .NL_SwitchStat.Status stat = 2;
      case 2: {
        if (tag == 16) {
         parse_stat:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::NL_SwitchStat_Status_IsValid(value)) {
            set_stat(static_cast< ::NL_SwitchStat_Status >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_dplx;
        break;
      }

      // optional .NL_SwitchStat.Duplex dplx = 3;
      case 3: {
        if (tag == 24) {
         parse_dplx:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::NL_SwitchStat_Duplex_IsValid(value)) {
            set_dplx(static_cast< ::NL_SwitchStat_Duplex >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_spd;
        break;
      }

      // optional .NL_SwitchStat.Speed spd = 4;
      case 4: {
        if (tag == 32) {
         parse_spd:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::NL_SwitchStat_Speed_IsValid(value)) {
            set_spd(static_cast< ::NL_SwitchStat_Speed >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_ingressbytes;
        break;
      }

      // optional uint64 ingressbytes = 5;
      case 5: {
        if (tag == 40) {
         parse_ingressbytes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &ingressbytes_)));
          set_has_ingressbytes();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_ingressunicast;
        break;
      }

      // optional uint64 ingressunicast = 6;
      case 6: {
        if (tag == 48) {
         parse_ingressunicast:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &ingressunicast_)));
          set_has_ingressunicast();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_ingressbroadcast;
        break;
      }

      // optional uint64 ingressbroadcast = 7;
      case 7: {
        if (tag == 56) {
         parse_ingressbroadcast:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &ingressbroadcast_)));
          set_has_ingressbroadcast();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_ingressmulticast;
        break;
      }

      // optional uint64 ingressmulticast = 8;
      case 8: {
        if (tag == 64) {
         parse_ingressmulticast:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &ingressmulticast_)));
          set_has_ingressmulticast();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_ingresspause;
        break;
      }

      // optional uint64 ingresspause = 9;
      case 9: {
        if (tag == 72) {
         parse_ingresspause:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &ingresspause_)));
          set_has_ingresspause();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_ingressundersize;
        break;
      }

      // optional uint64 ingressundersize = 10;
      case 10: {
        if (tag == 80) {
         parse_ingressundersize:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &ingressundersize_)));
          set_has_ingressundersize();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_ingressfragments;
        break;
      }

      // optional uint64 ingressfragments = 11;
      case 11: {
        if (tag == 88) {
         parse_ingressfragments:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &ingressfragments_)));
          set_has_ingressfragments();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_ingressoversize;
        break;
      }

      // optional uint64 ingressoversize = 12;
      case 12: {
        if (tag == 96) {
         parse_ingressoversize:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &ingressoversize_)));
          set_has_ingressoversize();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_ingressjabber;
        break;
      }

      // optional uint64 ingressjabber = 13;
      case 13: {
        if (tag == 104) {
         parse_ingressjabber:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &ingressjabber_)));
          set_has_ingressjabber();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_ingressrxerr;
        break;
      }

      // optional uint64 ingressrxerr = 14;
      case 14: {
        if (tag == 112) {
         parse_ingressrxerr:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &ingressrxerr_)));
          set_has_ingressrxerr();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(120)) goto parse_ingressfcserr;
        break;
      }

      // optional uint64 ingressfcserr = 15;
      case 15: {
        if (tag == 120) {
         parse_ingressfcserr:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &ingressfcserr_)));
          set_has_ingressfcserr();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(128)) goto parse_egressbytes;
        break;
      }

      // optional uint64 egressbytes = 16;
      case 16: {
        if (tag == 128) {
         parse_egressbytes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &egressbytes_)));
          set_has_egressbytes();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(136)) goto parse_egressunicast;
        break;
      }

      // optional uint64 egressunicast = 17;
      case 17: {
        if (tag == 136) {
         parse_egressunicast:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &egressunicast_)));
          set_has_egressunicast();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(144)) goto parse_egressbroadcast;
        break;
      }

      // optional uint64 egressbroadcast = 18;
      case 18: {
        if (tag == 144) {
         parse_egressbroadcast:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &egressbroadcast_)));
          set_has_egressbroadcast();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(152)) goto parse_egressmulticast;
        break;
      }

      // optional uint64 egressmulticast = 19;
      case 19: {
        if (tag == 152) {
         parse_egressmulticast:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &egressmulticast_)));
          set_has_egressmulticast();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(160)) goto parse_egresspause;
        break;
      }

      // optional uint64 egresspause = 20;
      case 20: {
        if (tag == 160) {
         parse_egresspause:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &egresspause_)));
          set_has_egresspause();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(168)) goto parse_egressexcessive;
        break;
      }

      // optional uint64 egressexcessive = 21;
      case 21: {
        if (tag == 168) {
         parse_egressexcessive:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &egressexcessive_)));
          set_has_egressexcessive();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(176)) goto parse_egresscollisions;
        break;
      }

      // optional uint64 egresscollisions = 22;
      case 22: {
        if (tag == 176) {
         parse_egresscollisions:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &egresscollisions_)));
          set_has_egresscollisions();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(184)) goto parse_egressother;
        break;
      }

      // optional uint64 egressother = 23;
      case 23: {
        if (tag == 184) {
         parse_egressother:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &egressother_)));
          set_has_egressother();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NL_SwitchStat)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NL_SwitchStat)
  return false;
#undef DO_
}

void NL_SwitchStat::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NL_SwitchStat)
  // required uint32 ident = 1;
  if (has_ident()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->ident(), output);
  }

  // optional .NL_SwitchStat.Status stat = 2;
  if (has_stat()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->stat(), output);
  }

  // optional .NL_SwitchStat.Duplex dplx = 3;
  if (has_dplx()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->dplx(), output);
  }

  // optional .NL_SwitchStat.Speed spd = 4;
  if (has_spd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->spd(), output);
  }

  // optional uint64 ingressbytes = 5;
  if (has_ingressbytes()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->ingressbytes(), output);
  }

  // optional uint64 ingressunicast = 6;
  if (has_ingressunicast()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->ingressunicast(), output);
  }

  // optional uint64 ingressbroadcast = 7;
  if (has_ingressbroadcast()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->ingressbroadcast(), output);
  }

  // optional uint64 ingressmulticast = 8;
  if (has_ingressmulticast()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(8, this->ingressmulticast(), output);
  }

  // optional uint64 ingresspause = 9;
  if (has_ingresspause()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(9, this->ingresspause(), output);
  }

  // optional uint64 ingressundersize = 10;
  if (has_ingressundersize()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(10, this->ingressundersize(), output);
  }

  // optional uint64 ingressfragments = 11;
  if (has_ingressfragments()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(11, this->ingressfragments(), output);
  }

  // optional uint64 ingressoversize = 12;
  if (has_ingressoversize()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(12, this->ingressoversize(), output);
  }

  // optional uint64 ingressjabber = 13;
  if (has_ingressjabber()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(13, this->ingressjabber(), output);
  }

  // optional uint64 ingressrxerr = 14;
  if (has_ingressrxerr()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(14, this->ingressrxerr(), output);
  }

  // optional uint64 ingressfcserr = 15;
  if (has_ingressfcserr()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(15, this->ingressfcserr(), output);
  }

  // optional uint64 egressbytes = 16;
  if (has_egressbytes()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(16, this->egressbytes(), output);
  }

  // optional uint64 egressunicast = 17;
  if (has_egressunicast()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(17, this->egressunicast(), output);
  }

  // optional uint64 egressbroadcast = 18;
  if (has_egressbroadcast()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(18, this->egressbroadcast(), output);
  }

  // optional uint64 egressmulticast = 19;
  if (has_egressmulticast()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(19, this->egressmulticast(), output);
  }

  // optional uint64 egresspause = 20;
  if (has_egresspause()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(20, this->egresspause(), output);
  }

  // optional uint64 egressexcessive = 21;
  if (has_egressexcessive()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(21, this->egressexcessive(), output);
  }

  // optional uint64 egresscollisions = 22;
  if (has_egresscollisions()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(22, this->egresscollisions(), output);
  }

  // optional uint64 egressother = 23;
  if (has_egressother()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(23, this->egressother(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:NL_SwitchStat)
}

::google::protobuf::uint8* NL_SwitchStat::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:NL_SwitchStat)
  // required uint32 ident = 1;
  if (has_ident()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->ident(), target);
  }

  // optional .NL_SwitchStat.Status stat = 2;
  if (has_stat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->stat(), target);
  }

  // optional .NL_SwitchStat.Duplex dplx = 3;
  if (has_dplx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->dplx(), target);
  }

  // optional .NL_SwitchStat.Speed spd = 4;
  if (has_spd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->spd(), target);
  }

  // optional uint64 ingressbytes = 5;
  if (has_ingressbytes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->ingressbytes(), target);
  }

  // optional uint64 ingressunicast = 6;
  if (has_ingressunicast()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->ingressunicast(), target);
  }

  // optional uint64 ingressbroadcast = 7;
  if (has_ingressbroadcast()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(7, this->ingressbroadcast(), target);
  }

  // optional uint64 ingressmulticast = 8;
  if (has_ingressmulticast()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(8, this->ingressmulticast(), target);
  }

  // optional uint64 ingresspause = 9;
  if (has_ingresspause()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(9, this->ingresspause(), target);
  }

  // optional uint64 ingressundersize = 10;
  if (has_ingressundersize()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(10, this->ingressundersize(), target);
  }

  // optional uint64 ingressfragments = 11;
  if (has_ingressfragments()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(11, this->ingressfragments(), target);
  }

  // optional uint64 ingressoversize = 12;
  if (has_ingressoversize()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(12, this->ingressoversize(), target);
  }

  // optional uint64 ingressjabber = 13;
  if (has_ingressjabber()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(13, this->ingressjabber(), target);
  }

  // optional uint64 ingressrxerr = 14;
  if (has_ingressrxerr()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(14, this->ingressrxerr(), target);
  }

  // optional uint64 ingressfcserr = 15;
  if (has_ingressfcserr()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(15, this->ingressfcserr(), target);
  }

  // optional uint64 egressbytes = 16;
  if (has_egressbytes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(16, this->egressbytes(), target);
  }

  // optional uint64 egressunicast = 17;
  if (has_egressunicast()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(17, this->egressunicast(), target);
  }

  // optional uint64 egressbroadcast = 18;
  if (has_egressbroadcast()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(18, this->egressbroadcast(), target);
  }

  // optional uint64 egressmulticast = 19;
  if (has_egressmulticast()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(19, this->egressmulticast(), target);
  }

  // optional uint64 egresspause = 20;
  if (has_egresspause()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(20, this->egresspause(), target);
  }

  // optional uint64 egressexcessive = 21;
  if (has_egressexcessive()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(21, this->egressexcessive(), target);
  }

  // optional uint64 egresscollisions = 22;
  if (has_egresscollisions()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(22, this->egresscollisions(), target);
  }

  // optional uint64 egressother = 23;
  if (has_egressother()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(23, this->egressother(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NL_SwitchStat)
  return target;
}

int NL_SwitchStat::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 ident = 1;
    if (has_ident()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ident());
    }

    // optional .NL_SwitchStat.Status stat = 2;
    if (has_stat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->stat());
    }

    // optional .NL_SwitchStat.Duplex dplx = 3;
    if (has_dplx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->dplx());
    }

    // optional .NL_SwitchStat.Speed spd = 4;
    if (has_spd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->spd());
    }

    // optional uint64 ingressbytes = 5;
    if (has_ingressbytes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->ingressbytes());
    }

    // optional uint64 ingressunicast = 6;
    if (has_ingressunicast()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->ingressunicast());
    }

    // optional uint64 ingressbroadcast = 7;
    if (has_ingressbroadcast()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->ingressbroadcast());
    }

    // optional uint64 ingressmulticast = 8;
    if (has_ingressmulticast()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->ingressmulticast());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint64 ingresspause = 9;
    if (has_ingresspause()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->ingresspause());
    }

    // optional uint64 ingressundersize = 10;
    if (has_ingressundersize()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->ingressundersize());
    }

    // optional uint64 ingressfragments = 11;
    if (has_ingressfragments()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->ingressfragments());
    }

    // optional uint64 ingressoversize = 12;
    if (has_ingressoversize()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->ingressoversize());
    }

    // optional uint64 ingressjabber = 13;
    if (has_ingressjabber()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->ingressjabber());
    }

    // optional uint64 ingressrxerr = 14;
    if (has_ingressrxerr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->ingressrxerr());
    }

    // optional uint64 ingressfcserr = 15;
    if (has_ingressfcserr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->ingressfcserr());
    }

    // optional uint64 egressbytes = 16;
    if (has_egressbytes()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->egressbytes());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional uint64 egressunicast = 17;
    if (has_egressunicast()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->egressunicast());
    }

    // optional uint64 egressbroadcast = 18;
    if (has_egressbroadcast()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->egressbroadcast());
    }

    // optional uint64 egressmulticast = 19;
    if (has_egressmulticast()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->egressmulticast());
    }

    // optional uint64 egresspause = 20;
    if (has_egresspause()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->egresspause());
    }

    // optional uint64 egressexcessive = 21;
    if (has_egressexcessive()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->egressexcessive());
    }

    // optional uint64 egresscollisions = 22;
    if (has_egresscollisions()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->egresscollisions());
    }

    // optional uint64 egressother = 23;
    if (has_egressother()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->egressother());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NL_SwitchStat::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NL_SwitchStat* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NL_SwitchStat*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NL_SwitchStat::MergeFrom(const NL_SwitchStat& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ident()) {
      set_ident(from.ident());
    }
    if (from.has_stat()) {
      set_stat(from.stat());
    }
    if (from.has_dplx()) {
      set_dplx(from.dplx());
    }
    if (from.has_spd()) {
      set_spd(from.spd());
    }
    if (from.has_ingressbytes()) {
      set_ingressbytes(from.ingressbytes());
    }
    if (from.has_ingressunicast()) {
      set_ingressunicast(from.ingressunicast());
    }
    if (from.has_ingressbroadcast()) {
      set_ingressbroadcast(from.ingressbroadcast());
    }
    if (from.has_ingressmulticast()) {
      set_ingressmulticast(from.ingressmulticast());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_ingresspause()) {
      set_ingresspause(from.ingresspause());
    }
    if (from.has_ingressundersize()) {
      set_ingressundersize(from.ingressundersize());
    }
    if (from.has_ingressfragments()) {
      set_ingressfragments(from.ingressfragments());
    }
    if (from.has_ingressoversize()) {
      set_ingressoversize(from.ingressoversize());
    }
    if (from.has_ingressjabber()) {
      set_ingressjabber(from.ingressjabber());
    }
    if (from.has_ingressrxerr()) {
      set_ingressrxerr(from.ingressrxerr());
    }
    if (from.has_ingressfcserr()) {
      set_ingressfcserr(from.ingressfcserr());
    }
    if (from.has_egressbytes()) {
      set_egressbytes(from.egressbytes());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_egressunicast()) {
      set_egressunicast(from.egressunicast());
    }
    if (from.has_egressbroadcast()) {
      set_egressbroadcast(from.egressbroadcast());
    }
    if (from.has_egressmulticast()) {
      set_egressmulticast(from.egressmulticast());
    }
    if (from.has_egresspause()) {
      set_egresspause(from.egresspause());
    }
    if (from.has_egressexcessive()) {
      set_egressexcessive(from.egressexcessive());
    }
    if (from.has_egresscollisions()) {
      set_egresscollisions(from.egresscollisions());
    }
    if (from.has_egressother()) {
      set_egressother(from.egressother());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NL_SwitchStat::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NL_SwitchStat::CopyFrom(const NL_SwitchStat& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NL_SwitchStat::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void NL_SwitchStat::Swap(NL_SwitchStat* other) {
  if (other != this) {
    std::swap(ident_, other->ident_);
    std::swap(stat_, other->stat_);
    std::swap(dplx_, other->dplx_);
    std::swap(spd_, other->spd_);
    std::swap(ingressbytes_, other->ingressbytes_);
    std::swap(ingressunicast_, other->ingressunicast_);
    std::swap(ingressbroadcast_, other->ingressbroadcast_);
    std::swap(ingressmulticast_, other->ingressmulticast_);
    std::swap(ingresspause_, other->ingresspause_);
    std::swap(ingressundersize_, other->ingressundersize_);
    std::swap(ingressfragments_, other->ingressfragments_);
    std::swap(ingressoversize_, other->ingressoversize_);
    std::swap(ingressjabber_, other->ingressjabber_);
    std::swap(ingressrxerr_, other->ingressrxerr_);
    std::swap(ingressfcserr_, other->ingressfcserr_);
    std::swap(egressbytes_, other->egressbytes_);
    std::swap(egressunicast_, other->egressunicast_);
    std::swap(egressbroadcast_, other->egressbroadcast_);
    std::swap(egressmulticast_, other->egressmulticast_);
    std::swap(egresspause_, other->egresspause_);
    std::swap(egressexcessive_, other->egressexcessive_);
    std::swap(egresscollisions_, other->egresscollisions_);
    std::swap(egressother_, other->egressother_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NL_SwitchStat::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NL_SwitchStat_descriptor_;
  metadata.reflection = NL_SwitchStat_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* NL_Message_Source_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NL_Message_Source_descriptor_;
}
bool NL_Message_Source_IsValid(int value) {
  switch(value) {
    case -1:
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const NL_Message_Source NL_Message::IO;
const NL_Message_Source NL_Message::ADS;
const NL_Message_Source NL_Message::EFB;
const NL_Message_Source NL_Message::COMM;
const NL_Message_Source NL_Message::INVALID;
const NL_Message_Source NL_Message::Source_MIN;
const NL_Message_Source NL_Message::Source_MAX;
const int NL_Message::Source_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* NL_Message_Command_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NL_Message_Command_descriptor_;
}
bool NL_Message_Command_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const NL_Message_Command NL_Message::REGISTER;
const NL_Message_Command NL_Message::REGISTER_REQUEST;
const NL_Message_Command NL_Message::UPDATE;
const NL_Message_Command NL_Message::UPDATE_REQUEST;
const NL_Message_Command NL_Message::CLEAR;
const NL_Message_Command NL_Message::Command_MIN;
const NL_Message_Command NL_Message::Command_MAX;
const int NL_Message::Command_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* NL_Message_Network_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NL_Message_Network_descriptor_;
}
bool NL_Message_Network_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const NL_Message_Network NL_Message::EDN;
const NL_Message_Network NL_Message::IDN;
const NL_Message_Network NL_Message::Network_MIN;
const NL_Message_Network NL_Message::Network_MAX;
const int NL_Message::Network_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int NL_Message::kSourceFieldNumber;
const int NL_Message::kCommandFieldNumber;
const int NL_Message::kIpStatFieldNumber;
const int NL_Message::kSwitchStatFieldNumber;
const int NL_Message::kEthernetStatFieldNumber;
const int NL_Message::kSwitchStatNetworkFieldNumber;
#endif  // !_MSC_VER

NL_Message::NL_Message()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:NL_Message)
}

void NL_Message::InitAsDefaultInstance() {
}

NL_Message::NL_Message(const NL_Message& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:NL_Message)
}

void NL_Message::SharedCtor() {
  _cached_size_ = 0;
  source_ = -1;
  command_ = 0;
  switchstatnetwork_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NL_Message::~NL_Message() {
  // @@protoc_insertion_point(destructor:NL_Message)
  SharedDtor();
}

void NL_Message::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NL_Message::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NL_Message::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NL_Message_descriptor_;
}

const NL_Message& NL_Message::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PBNetStat_2eproto();
  return *default_instance_;
}

NL_Message* NL_Message::default_instance_ = NULL;

NL_Message* NL_Message::New() const {
  return new NL_Message;
}

void NL_Message::Clear() {
  if (_has_bits_[0 / 32] & 35) {
    source_ = -1;
    command_ = 0;
    switchstatnetwork_ = 0;
  }
  ipstat_.Clear();
  switchstat_.Clear();
  ethernetstat_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NL_Message::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NL_Message)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .NL_Message.Source source = 1 [default = INVALID];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::NL_Message_Source_IsValid(value)) {
            set_source(static_cast< ::NL_Message_Source >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_command;
        break;
      }

      // required .NL_Message.Command command = 2 [default = REGISTER];
      case 2: {
        if (tag == 16) {
         parse_command:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::NL_Message_Command_IsValid(value)) {
            set_command(static_cast< ::NL_Message_Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_ipStat;
        break;
      }

      // repeated .NL_IpTableStat ipStat = 3;
      case 3: {
        if (tag == 26) {
         parse_ipStat:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_ipstat()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_ipStat;
        if (input->ExpectTag(34)) goto parse_switchStat;
        break;
      }

      // repeated .NL_SwitchStat switchStat = 4;
      case 4: {
        if (tag == 34) {
         parse_switchStat:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_switchstat()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_switchStat;
        if (input->ExpectTag(42)) goto parse_ethernetStat;
        break;
      }

      // repeated .NL_EthernetStat ethernetStat = 5;
      case 5: {
        if (tag == 42) {
         parse_ethernetStat:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_ethernetstat()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_ethernetStat;
        if (input->ExpectTag(48)) goto parse_switchStatNetwork;
        break;
      }

      // optional .NL_Message.Network switchStatNetwork = 6;
      case 6: {
        if (tag == 48) {
         parse_switchStatNetwork:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::NL_Message_Network_IsValid(value)) {
            set_switchstatnetwork(static_cast< ::NL_Message_Network >(value));
          } else {
            mutable_unknown_fields()->AddVarint(6, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NL_Message)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NL_Message)
  return false;
#undef DO_
}

void NL_Message::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NL_Message)
  // required .NL_Message.Source source = 1 [default = INVALID];
  if (has_source()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->source(), output);
  }

  // required .NL_Message.Command command = 2 [default = REGISTER];
  if (has_command()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->command(), output);
  }

  // repeated .NL_IpTableStat ipStat = 3;
  for (int i = 0; i < this->ipstat_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->ipstat(i), output);
  }

  // repeated .NL_SwitchStat switchStat = 4;
  for (int i = 0; i < this->switchstat_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->switchstat(i), output);
  }

  // repeated .NL_EthernetStat ethernetStat = 5;
  for (int i = 0; i < this->ethernetstat_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->ethernetstat(i), output);
  }

  // optional .NL_Message.Network switchStatNetwork = 6;
  if (has_switchstatnetwork()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->switchstatnetwork(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:NL_Message)
}

::google::protobuf::uint8* NL_Message::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:NL_Message)
  // required .NL_Message.Source source = 1 [default = INVALID];
  if (has_source()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->source(), target);
  }

  // required .NL_Message.Command command = 2 [default = REGISTER];
  if (has_command()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->command(), target);
  }

  // repeated .NL_IpTableStat ipStat = 3;
  for (int i = 0; i < this->ipstat_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->ipstat(i), target);
  }

  // repeated .NL_SwitchStat switchStat = 4;
  for (int i = 0; i < this->switchstat_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->switchstat(i), target);
  }

  // repeated .NL_EthernetStat ethernetStat = 5;
  for (int i = 0; i < this->ethernetstat_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->ethernetstat(i), target);
  }

  // optional .NL_Message.Network switchStatNetwork = 6;
  if (has_switchstatnetwork()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->switchstatnetwork(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NL_Message)
  return target;
}

int NL_Message::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .NL_Message.Source source = 1 [default = INVALID];
    if (has_source()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->source());
    }

    // required .NL_Message.Command command = 2 [default = REGISTER];
    if (has_command()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->command());
    }

    // optional .NL_Message.Network switchStatNetwork = 6;
    if (has_switchstatnetwork()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->switchstatnetwork());
    }

  }
  // repeated .NL_IpTableStat ipStat = 3;
  total_size += 1 * this->ipstat_size();
  for (int i = 0; i < this->ipstat_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->ipstat(i));
  }

  // repeated .NL_SwitchStat switchStat = 4;
  total_size += 1 * this->switchstat_size();
  for (int i = 0; i < this->switchstat_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->switchstat(i));
  }

  // repeated .NL_EthernetStat ethernetStat = 5;
  total_size += 1 * this->ethernetstat_size();
  for (int i = 0; i < this->ethernetstat_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->ethernetstat(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NL_Message::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NL_Message* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NL_Message*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NL_Message::MergeFrom(const NL_Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  ipstat_.MergeFrom(from.ipstat_);
  switchstat_.MergeFrom(from.switchstat_);
  ethernetstat_.MergeFrom(from.ethernetstat_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_source()) {
      set_source(from.source());
    }
    if (from.has_command()) {
      set_command(from.command());
    }
    if (from.has_switchstatnetwork()) {
      set_switchstatnetwork(from.switchstatnetwork());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NL_Message::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NL_Message::CopyFrom(const NL_Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NL_Message::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->ipstat())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->switchstat())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->ethernetstat())) return false;
  return true;
}

void NL_Message::Swap(NL_Message* other) {
  if (other != this) {
    std::swap(source_, other->source_);
    std::swap(command_, other->command_);
    ipstat_.Swap(&other->ipstat_);
    switchstat_.Swap(&other->switchstat_);
    ethernetstat_.Swap(&other->ethernetstat_);
    std::swap(switchstatnetwork_, other->switchstatnetwork_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NL_Message::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NL_Message_descriptor_;
  metadata.reflection = NL_Message_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
